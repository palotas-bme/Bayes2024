var feature1 = ['könyvtáros', 'tanár'];
var feature2 = ['csendes', 'cserfes'];
var operator = [' és ', ' vagy '];

var SimpleModel = function () {
	var word1 = uniformDraw(feature1)
	var op = uniformDraw(operator)

	var word2 = uniformDraw(feature2)
	print('Premissza: Anna ' + word1 + op + word2 + '.');
	var word3 = uniformDraw(feature2)
	print('Konklúzió: Anna ' + word3 + '.');
	var ervenyes = (op == ' és ')
		? ((word2 == word3) ? 'érvényes' : 'nem érvényes')
		: 'nem érvényes'
	print(ervenyes);
	return ervenyes
}

var output =
	Infer({ model: SimpleModel, method: 'rejection', samples: 1 })

// 1.1
var ComplexModel1 = function () {
	var profession = uniformDraw(feature1);
	var conjunction = uniformDraw(operator);
	var temperament = uniformDraw(feature2);
	var swapProbability = 0.3;

	var agentName = 'Panni';
	var premise = agentName + ' ' + profession + conjunction + temperament + '.';

	var conclusionTemperament = uniformDraw(feature2);
	var conclusion = agentName + ' ' + conclusionTemperament + '.';

	if (Math.random() < swapProbability) {
		var conclusion = agentName + ' ' + (conclusionTemperament === 'csendes' ? 'cserfes' : 'csendes') + '.';
	}

	print('Premissza: ' + premise);
	print('Konklúzió: ' + conclusion);

	var valid = (conjunction === ' és ')
		? (conclusionTemperament === temperament ? 'érvényes' : 'nem érvényes')
		: 'nem érvényes';

	print(valid);
	return valid;
}

var output = Infer({ model: ComplexModel1, method: 'rejection', samples: 1 });

// 1.2
var ComplexModel2 = function () {
	var profession = uniformDraw(feature1);
	var conjunctionProbability = Math.random();
	var conjunction = (conjunctionProbability < 0.95) ? ' és ' : ' vagy ';
	var temperament = uniformDraw(feature2);

	if (Math.random() < 0.8) {
		var conjunction = (conjunction === ' és ') ? ' vagy ' : ' és ';
	}

	var agentName = 'Panni';
	var premise = agentName + ' ' + profession + conjunction + temperament + '.';

	var conclusionProfession = uniformDraw(feature1);
	var conclusionTemperament = uniformDraw(feature2);
	var conclusion = agentName + ' ' + (Math.random() < 0.5 ? conclusionProfession : conclusionTemperament) + '.';

	print('Premissza: ' + premise);
	print('Konklúzió: ' + conclusion);

	var valid = (conjunction === ' és ')
		? (conclusion.includes('könyvtáros') || conclusion.includes('tanár')) && conclusion.includes(temperament) ? 'érvényes' : 'nem érvényes'
		: (conclusion.includes('csendes') || conclusion.includes('cserfes')) ? 'érvényes' : 'nem érvényes';

	print(valid);
	return valid;
}

var output = Infer({ model: ComplexModel2, method: 'rejection', samples: 1 });

// 1.3

var TwoDice = function () {
	var dice1 = categorical({
		ps: [1 / 6, 1 / 6, 1 / 6, 1 / 6, 1 / 6, 1 / 6],
		vs: [1, 2, 3, 4, 5, 6]
	});
	var dice2 = categorical({
		ps: [1 / 6, 1 / 6, 1 / 6, 1 / 6, 1 / 6, 1 / 6],
		vs: [1, 2, 3, 4, 5, 6]
	});
	return { dice: [dice1, dice2] };
}

var output = Infer({ method: 'forward', samples: 10000, model: TwoDice });

// 1.4
var aceInHand = flip(0.5); 
var kingInHandGivenAce = flip(0.5); 
var kingInHandGivenNoAce = flip(0.5);
var orMeanings = ['inclusive', 'exclusive', 'xor'];
var orMeaning = uniformDraw(orMeanings);
var kingInHand = (orMeaning === 'inclusive') ? (aceInHand && kingInHandGivenAce) || (!aceInHand && kingInHandGivenNoAce) :
	(orMeaning === 'exclusive') ? (aceInHand || (!aceInHand && kingInHandGivenNoAce)) :
		(aceInHand && kingInHandGivenAce) || ((!aceInHand) && kingInHandGivenNoAce);

print('Ász a kezemben: ' + aceInHand);
print('Király a kezemben: ' + kingInHand);